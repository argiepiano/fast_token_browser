<?php

/**
 * @file
 * Token Browser Module
 */

/**
 * Implements hook_library().
 */
function token_browser_library() {
  $libraries['token-browser'] = array(
    'title' => 'Token Browser',
    'version' => '1.0.0',
    'css' => array(
      drupal_get_path('module', 'token_browser') . '/css/token-browser.css' => array(),
    ),
    'js' => array(
      drupal_get_path('module', 'token_browser') . '/dist/token-browser.js' => array(),
    ),
    'dependencies' => array(
      array('system', 'ui.dialog'),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_menu().
 */
function token_browser_menu() {
  // AJAX endpoint for the assembled tree.
  $items['token/browser/tree'] = array(
    'page callback' => 'token_browser_tree',
    'delivery callback' => 'token_browser_tree_output',
    'access callback' => 'token_browser_tree_access',
    'type' => MENU_CALLBACK,
    'theme callback' => 'ajax_base_page_theme',
  );

  // AJAX endpoint for retrieving a token.
  $items['token/browser/token'] = array(
    'page callback' => 'token_browser_endpoint',
    'delivery callback' => 'token_browser_endpoint_output',
    'access callback' => 'token_browser_endpoint_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function token_browser_theme() {
  $themes['token_browser_link'] = array(
    'variables' => array(
      'text' => t('Browse available tokens.'),
      'token_types' => array(),
      'global_types' => TRUE,
      'dialog' => FALSE,
    ),
    'file' => 'includes/token_browser.theme.inc',
  );

  return $themes;
}

/**
 * Implements hook_menu_alter().
 */
function token_browser_menu_alter(&$items) {
  $items['token/tree'] = $items['token/browser/tree'];
}

/**
 * Implements hook_theme_registory_alter().
 */
function token_browser_theme_registry_alter(&$theme_registry) {
  $theme_registry['token_tree_link'] = $theme_registry['token_tree'] = $theme_registry['token_browser_link'];
}

/**
 * Token browser tree page callback.
 */
function token_browser_tree() {
  $types = isset($_GET['token_types']) ? drupal_json_decode($_GET['token_types']) : array();
  $globals = isset($_GET['global_types']) ? drupal_json_decode($_GET['global_types']) : TRUE;

  return token_browser_tree_view($types, $globals);
}

/**
 * Token browser tree access callback.
 */
function token_browser_tree_access() {
  return isset($_GET['token']) && drupal_valid_token($_GET['token'], 'token-browser');
}

/**
 * Token browser output delivery callback.
 *
 * @param array $page_callback_result
 *   A Token Browser tree render array.
 */
function token_browser_tree_output($page_callback_result) {
  if (is_int($page_callback_result)) {
    drupal_deliver_html_page($page_callback_result);
  }
  elseif (isset($page_callback_result)) {
    $content = drupal_render($page_callback_result);
    $html = drupal_get_css() . drupal_get_js('header') . $content . drupal_get_js('footer');

    drupal_page_header();

    print $html;

    drupal_page_footer();
  }
  else {
    drupal_page_header();
    drupal_page_footer();
  }
}

/**
 * Token browser JSON endpoint callback.
 *
 * @param string $type
 *   The token type.
 */
function token_browser_endpoint($type) {
  $ancestors = isset($_GET['ancestors']) ? drupal_json_decode($_GET['ancestors']) : array();

  return token_browser_build_level($type, $ancestors);
}

/**
 * Token browser JSON endpoint access callback.
 */
function token_browser_endpoint_access() {
  return isset($_GET['token']) && drupal_valid_token($_GET['token'], 'token-browser-endpoint');
}

/**
 * Token browser JSON endpoint output callback.
 */
function token_browser_endpoint_output($page_callback_result) {
  if (is_int($page_callback_result)) {
    drupal_deliver_html_page($page_callback_result);
  }
  elseif (isset($page_callback_result)) {
    drupal_json_output($page_callback_result);
  }
  else {
    drupal_page_header();
    drupal_page_footer();
  }
}

/**
 * Genereate a render array of token types.
 *
 * @param array $types
 *   An array of token types to display in the tree.
 * @param bool $global_types
 *   Whether or not to include global types in the tree.
 * @return array
 *   The constructed array of types keyed by type.
 */
function token_browser_tree_view(array $types = array(), $global_types = TRUE) {
  global $language;

  $info = token_get_info();
  $rows = array();
  $posinset = 1;

  if (empty($types)) {
    $types = array_keys($info['types']);
  }
  elseif ($global_types) {
    $types = array_merge($types, token_get_global_token_types());
  }

  foreach ($info['types'] as $type => $type_info) {
    if (!in_array($type, $types) || substr($type, 0, 4) === 'list') {
      continue;
    }

    $rows[] = array(
      'data' => array(
        array(
          'data' => '<button aria-label="Expand">Expand</button>' . $type_info['name'],
          'data-type' => $type,
          'role' => 'gridcell',
          'class' => array('token-name'),
        ),
        array(
          'data' => $type,
          'role' => 'gridcell',
          'class' => array('token-raw'),
        ),
        array(
          'data' => isset($type_info['description']) ? $type_info['description'] : '',
          'role' => 'gridcell',
          'class' => array('token-description'),
        ),
      ),
      'role' => 'row',
      'aria-level' => '1',
      'aria-posinset' => $posinset++,
      'aria-expanded' => 'false',
      'aria-busy' => 'false',
      'class' => array('tree-grid-parent'),
      'no_striping' => TRUE,
    );
  }

  $cid = 'token-browser:' . hash('sha256', serialize(array(
    'token_types' => $types,
    'global_types' => $global_types,
    'language' => $language->language,
  )));

  $build = array(
    '#theme' => 'table',
    '#header' => array(
      t('Name'),
      t('Token'),
      t('Description'),
    ),
    '#rows' => $rows,
    '#attributes' => array(
      'role' => 'treetable',
      'aria-label' => 'Token Browser',
      'class' => array(
        'tree-grid',
      ),
    ),
    '#attached' => array(
      'library' => array(
        array('token_browser', 'token-browser'),
      ),
    ),
    '#cache' => array(
      'cid' => $cid,
      'bin' => 'cache_token',
    ),
  );

  return $build;
}

/**
 * Build a level of the token heirarchy.
 *
 * @param string $type
 *   The type to build a level for.
 * @param array $ancestors
 *   The ancestors of the given type. This allows the complete token to be
 *   constructed.
 * @return array
 *   The constructed level of tokens as an array keyed by token.
 */
function token_browser_build_level($type, array $ancestors = array()) {
  global $language;

  $level = array();
  $info = token_get_info();

  if (!isset($info['types'][$type]) || !isset($info['tokens'][$type])) {
    return $level;
  }

  if ($entity_token = token_get_entity_mapping('entity', $type)) {
    $type = $entity_token;
  }

  $cid = 'token-browser-level:' . hash('sha256', serialize(array(
    'type' => $type,
    'ancestors' => $ancestors,
    'language' => $language->language,
  )));

  if ($cache = cache_get($cid, 'cache_token')) {
    return $cache->data;
  }

  foreach ($info['tokens'][$type] as $child => $child_info) {
    $raw_token_parts = $ancestors;

    if (in_array($child, array_slice($raw_token_parts, 1), TRUE)) {
      continue;
    }

    $raw_token_parts[] = $child;

    if (!empty($child_info['dynamic'])) {
      $raw_token_parts[] = '?';
    }

    $raw_token = '[' . implode(':', $raw_token_parts) . ']';
    $level[$child]['name'] = $child_info['name'];
    $level[$child]['description'] = $child_info['description'];
    $level[$child]['token'] = $child;

    if (isset($info['types'][$child_info['type']])) {
      $level[$child]['type'] = $child_info['type'];
    }

    $level[$child]['raw'] = $raw_token;
    $level[$child]['ancestors'] = $ancestors;
  }

  cache_set($cid, $level, 'cache_token');

  return $level;
}
